services:
  db:
    image: postgres:17-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: psgr
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    networks:
      - dbnet
  
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      - db
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - dbnet

  backend-fastapi:
    build: .
    image: backend-fastapi
    container_name: backend-fastapi
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    command: "uvicorn main:app --host 0.0.0.0 --port 4000 --reload" # --workers 4
    ports:
      - "127.0.0.1:8000:4000"
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    networks:
      - dbnet
  
  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: redis-server --protected-mode no
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} --no-auth-warning ping | grep -q PONG"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    restart: unless-stopped
    networks:
      - dbnet

networks:
  dbnet:
    driver: bridge

volumes:
  postgres-data:
  redisdata:
